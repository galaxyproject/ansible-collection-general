---

# TODO: Inspect lower priority lists (host_files > group_files > all_files) and
# do not copy lower priority files if the same `dest` is present in a higher
# priority list

- name: Copy files
  copy:
    backup: "{{ item.backup | default(omit) }}"
    content: "{{ item.content | default(omit) }}"
    dest: "{{ item.dest }}"
    directory_mode: "{{ item.directory_mode | default(omit) }}"
    follow: "{{ item.follow | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    src: "{{ item.src | default(omit) }}"
    validate: "{{ item.validate | default(omit) }}"
  with_galaxyproject.general.inheritance_chain: "files"
  register: __files_result
  when: "item.state is not defined or item.state == 'present'"

- name: Remove copy files with state=absent
  file:
    path: "{{ item.dest }}"
    state: absent
  with_galaxyproject.general.inheritance_chain: "files"
  when: "item.state is defined and item.state == 'absent'"

- name: Copy templates
  template:
    backup: "{{ item.backup | default(omit) }}"
    dest: "{{ item.dest }}"
    follow: "{{ item.follow | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    src: "{{ item.src | default(omit) }}"
    validate: "{{ item.validate | default(omit) }}"
  register: __templates_result
  with_galaxyproject.general.inheritance_chain: "templates"

- name: Remove template files with state=absent
  file:
    path: "{{ item.dest }}"
    state: absent
  with_galaxyproject.general.inheritance_chain: "templates"
  register: __templates_absent_result
  when: "item.state is defined and item.state == 'absent'"

- name: Set lines in files
  lineinfile:
    attributes: "{{ item.attributes | default(omit) }}"
    backrefs: "{{ item.backrefs | default(omit) }}"
    backup: "{{ item.backup | default(omit) }}"
    create: "{{ item.create | default(omit) }}"
    firstmatch: "{{ item.firstmatch | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    insertafter: "{{ item.insertafter | default(omit) }}"
    insertbefore: "{{ item.insertbefore | default(omit) }}"
    line: "{{ item.line | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    path: "{{ item.path | default(item.dest) }}"
    regexp: "{{ item.regexp | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    unsafe_writes: "{{ item.unsafe_writes | default(omit) }}"
    validate: "{{ item.validate | default(omit) }}"
  with_galaxyproject.general.inheritance_chain: "lines"
  register: __lines_result
  notify: "{{ item.notify | default([]) }}"

- name: Reload systemd if any changes were to systemd units
  ansible.builtin.systemd:
    daemon_reload: true
  when: ((__files_result.results + __templates_result.results + __templates_absent_result.results) | selectattr("changed")) is any and ((__files_result.results + __templates_result.results + __templates_absent_result.results) | selectattr("item.dest", "match", "/etc/systemd/system/.*")) is any
