---

- name: Update cache and ensure apt-transport-https is installed
  apt:
    pkg: apt-transport-https
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"

- name: Add APT keys
  apt_key:
    data: "{{ item.data | default(omit) }}"
    file: "{{ item.file | default(omit) }}"
    id: "{{ item.id | default(omit) }}"
    keyring: "{{ item.keyring | default(omit) }}"
    keyserver: "{{ item.keyserver | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    url: "{{ item.url | default(omit) }}"
    validate_certs: "{{ item.validate_certs | default(omit) }}"
  with_flattened:
    - "{{ all_apt_keys }}"
    - "{{ group_apt_keys }}"
    - "[{% for group_name in group_names %}{{ vars[group_name ~ '_group_apt_keys'] ~ ', ' if group_name ~ '_group_apt_keys' in vars else None }}{% endfor %}]"
    - "{{ host_apt_keys }}"
  when: ansible_os_family == "Debian"

- name: Add APT repositories
  apt_repository:
    mode: "{{ item.mode | default(omit) }}"
    repo: "{{ item.repo }}"
    state: "{{ item.state | default(omit) }}"
    update_cache: "{{ item.update_cache | default(omit) }}"
    validate_certs: "{{ item.validate_certs | default(omit) }}"
  with_flattened:
   - "{{ all_apt_repositories }}"
   - "{{ group_apt_repositories }}"
   - "[{% for group_name in group_names %}{{ vars[group_name ~ '_group_apt_repositories'] ~ ', ' if group_name ~ '_group_apt_repositories' in vars else None }}{% endfor %}]"
   - "{{ host_apt_repositories }}"
  when: ansible_os_family == "Debian"
  register: apt_repository

- name: Add YUM repositories
  yum_repository:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    state: present
    async: "{{ item.async | default(omit) }}"
    attributes: "{{ item.attributes | default(omit) }}"
    bandwidth: "{{ item.bandwidth | default(omit) }}"
    baseurl: "{{ item.baseurl | default(omit) }}"
    cost: "{{ item.cost | default(omit) }}"
    deltarpm_metadata_percentage: "{{ item.deltarpm_metadata_percentage | default(omit) }}"
    deltarpm_percentage: "{{ item.deltarpm_percentage | default(omit) }}"
    enabled: "{{ item.enabled | default(omit) }}"
    enablegroups: "{{ item.enablegroups | default(omit) }}"
    exclude: "{{ item.exclude | default(omit) }}"
    failovermethod: "{{ item.failovermethod | default(omit) }}"
    file: "{{ item.file | default(omit) }}"
    gpgcakey: "{{ item.gpgcakey | default(omit) }}"
    gpgcheck: "{{ item.gpgcheck | default(omit) }}"
    gpgkey: "{{ item.gpgkey | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    http_caching: "{{ item.http_caching | default(omit) }}"
    include: "{{ item.include | default(omit) }}"
    includepkgs: "{{ item.includepkgs | default(omit) }}"
    ip_resolve: "{{ item.ip_resolve | default(omit) }}"
    keepalive: "{{ item.keepalive | default(omit) }}"
    keepcache: "{{ item.keepcache | default(omit) }}"
    metadata_expire: "{{ item.metadata_expire | default(omit) }}"
    metadata_expire_filter: "{{ item.metadata_expire_filter | default(omit) }}"
    metalink: "{{ item.metalink | default(omit) }}"
    mirrorlist: "{{ item.mirrorlist | default(omit) }}"
    mirrorlist_expire: "{{ item.mirrorlist_expire | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    params: "{{ item.params | default(omit) }}"
    password: "{{ item.password | default(omit) }}"
    priority: "{{ item.priority | default(omit) }}"
    protect: "{{ item.protect | default(omit) }}"
    proxy: "{{ item.proxy | default(omit) }}"
    proxy_password: "{{ item.proxy_password | default(omit) }}"
    proxy_username: "{{ item.proxy_username | default(omit) }}"
    repo_gpgcheck: "{{ item.repo_gpgcheck | default(omit) }}"
    reposdir: "{{ item.reposdir | default(omit) }}"
    retries: "{{ item.retries | default(omit) }}"
    s3_enabled: "{{ item.s3_enabled | default(omit) }}"
    selevel: "{{ item.selevel | default(omit) }}"
    serole: "{{ item.serole | default(omit) }}"
    setype: "{{ item.setype | default(omit) }}"
    seuser: "{{ item.seuser | default(omit) }}"
    skip_if_unavailable: "{{ item.skip_if_unavailable | default(omit) }}"
    ssl_check_cert_permissions: "{{ item.ssl_check_cert_permissions | default(omit) }}"
    sslcacert: "{{ item.sslcacert | default(omit) }}"
    sslclientcert: "{{ item.sslclientcert | default(omit) }}"
    sslclientkey: "{{ item.sslclientkey | default(omit) }}"
    sslverify: "{{ item.sslverify | default(omit) }}"
    throttle: "{{ item.throttle | default(omit) }}"
    timeout: "{{ item.timeout | default(omit) }}"
    ui_repoid_vars: "{{ item.ui_repoid_vars | default(omit) }}"
    unsafe_writes: "{{ item.unsafe_writes | default(omit) }}"
    username: "{{ item.username | default(omit) }}"
  with_flattened:
    - "{{ all_yum_repositories }}"
    - "{{ group_yum_repositories }}"
    - "[{% for group_name in group_names %}{{ vars[group_name ~ '_group_yum_repositories'] ~ ', ' if group_name ~ '_group_yum_repositories' in vars else None }}{% endfor %}]"
    - "{{ host_yum_repositories }}"
  when: item.state is undefined or item.state == 'present'

- name: Remove YUM repositories
  file:
    path: "/etc/yum.repos.d/ansible-{{ item.name }}.repo"
    state: absent
  with_flattened:
    - "{{ all_yum_repositories }}"
    - "{{ group_yum_repositories }}"
    - "[{% for group_name in group_names %}{{ vars[group_name ~ '_group_yum_repositories'] ~ ', ' if group_name ~ '_group_yum_repositories' in vars else None }}{% endfor %}]"
    - "{{ host_yum_repositories }}"
  when: item.state is defined and item.state == 'absent'

- name: Update APT cache for repository addition
  apt:
    update_cache: yes
  when: ansible_os_family == "Debian" and apt_repository.changed

- name: Install packages (apt)
  apt: pkg={{ item }}
  with_flattened:
    - "{{ all_packages }}"
    - "{{ group_packages }}"
    - "[{% for group_name in group_names %}{{ vars[group_name ~ '_group_packages'] ~ ', ' if group_name ~ '_group_packages' in vars else None }}{% endfor %}]"
    - "{{ host_packages }}"
  when: ansible_os_family == "Debian"

- name: Install packages (yum)
  yum: pkg={{ item }}
  with_flattened:
    - "{{ all_packages }}"
    - "{{ group_packages }}"
    - "[{% for group_name in group_names %}{{ vars[group_name ~ '_group_packages'] ~ ', ' if group_name ~ '_group_packages' in vars else None }}{% endfor %}]"
    - "{{ host_packages }}"
  when: ansible_os_family == "RedHat"

- name: Install packages (pkgin)
  pkgin: pkg={{ item }}
  with_flattened:
    - "{{ all_packages }}"
    - "{{ group_packages }}"
    - "[{% for group_name in group_names %}{{ vars[group_name ~ '_group_packages'] ~ ', ' if group_name ~ '_group_packages' in vars else None }}{% endfor %}]"
    - "{{ host_packages }}"
  when: ansible_distribution == "SmartOS"
