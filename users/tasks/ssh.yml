---

- name: Merge inheritance chain variables
  set_fact:
    common_authorized_key_users: "{{ lookup('inheritance_chain', 'authorized_key_users') | subelement_union('name', 'authorized') }}"
    common_private_key_users: "{{ lookup('inheritance_chain', 'private_key_users') | subelement_union('name', 'keys') }}"

- name: Ensure home directories exist for authorized/private keys
  user:
    name: "{{ item.name }}"
    createhome: yes
  with_items: "{{ common_authorized_key_users + common_private_key_users }}"
  loop_control:
    label: "{{ item.name }}"

- name: Set authorized keys
  authorized_key:
    user: "{{ item.name }}"
    key: "{% for authorized in item.authorized %}{{ sshkeys[authorized] ~ '\n' }}{% endfor %}"
    exclusive: "{{ item.exclusive | default('yes') }}"
  with_items: "{{ common_authorized_key_users }}"

# Still need to do this for the group ownership of .ssh and keys themselves until Ansible has a way to do this or we write a private key module
- name: Collect user groups for private keys
  command: id -gn {{ item.name }}
  with_items: "{{ common_private_key_users }}"
  changed_when: no
  register: private_key_groups_out

- name: Set user group fact
  set_fact:
    private_key_user_groups: "{{ {} | combine({item.item.name: item.stdout}) }}"
  with_items: "{{ private_key_groups_out.results }}"

- name: Ensure ~/.ssh directories exist for installing private keys
  file:
    path: "~{{ item.name }}"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ private_key_user_groups[item.name] }}"
  with_items: "{{ common_private_key_users }}"

- name: Install private keys
  copy:
    content: "{{ sshprivatekeys[item.1.key] }}"
    dest: "~{{ item.0.name }}/.ssh/{{ item.1.file }}"
    owner: "{{ item.0.name }}"
    group: "{{ private_key_user_groups[item.0.name] }}"
    mode: 0600
  with_subelements:
    - "{{ common_private_key_users }}"
    - keys
